warning: unused manifest key: profile.dev.target-cpu
warning: unused manifest key: profile.release.target-cpu
warning: unused import: `std::io::Write`
    --> src/database.rs:1194:5
     |
1194 | use std::io::Write;
     |     ^^^^^^^^^^^^^^
     |
     = note: `#[warn(unused_imports)]` on by default

warning: unnecessary parentheses around `if` condition
   --> src/play.rs:292:16
    |
292 |             if (assigned_time_ms >= 600000){
    |                ^                          ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
292 -             if (assigned_time_ms >= 600000){
292 +             if assigned_time_ms >= 600000 {
    |

warning: unnecessary parentheses around `if` condition
   --> src/play.rs:326:16
    |
326 |             if (res != -2){
    |                ^         ^
    |
help: remove these parentheses
    |
326 -             if (res != -2){
326 +             if res != -2 {
    |

warning: unnecessary parentheses around `if` condition
   --> src/play.rs:327:20
    |
327 |                 if (res == -1) {
    |                    ^         ^
    |
help: remove these parentheses
    |
327 -                 if (res == -1) {
327 +                 if res == -1 {
    |

warning: unnecessary parentheses around `if` condition
   --> src/play.rs:330:25
    |
330 |                 else if (res == 0) {
    |                         ^        ^
    |
help: remove these parentheses
    |
330 -                 else if (res == 0) {
330 +                 else if res == 0 {
    |

warning: unused import: `std::collections::HashMap`
 --> src/eval.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tract_onnx::tract_core::prelude::*`
 --> src/eval.rs:6:5
  |
6 | use tract_onnx::tract_core::prelude::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tract_onnx::tract_hir::prelude::*`
 --> src/eval.rs:7:5
  |
7 | use tract_onnx::tract_hir::prelude::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Write` and `self`
 --> src/solver.rs:3:15
  |
3 | use std::io::{self, Write};
  |               ^^^^  ^^^^^

warning: unused variable: `mask`
   --> src/eval.rs:153:13
    |
153 |         let mask = PATTERN_MASK[pattern_id];
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_mask`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `itertools::Itertools`
 --> src/solver.rs:2:5
  |
2 | use itertools::Itertools;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unnecessary `unsafe` block
    --> src/database.rs:1099:13
     |
1099 |             unsafe{
     |             ^^^^^^ unnecessary `unsafe` block
     |
     = note: `#[warn(unused_unsafe)]` on by default

warning: unused variable: `my_placeable_count`
   --> src/play.rs:260:13
    |
260 |         let my_placeable_count = my_placeable.count_ones() as i32;
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_my_placea
ble_count`                                                                                                  
warning: unused variable: `op_placeable_count`
   --> src/play.rs:264:13
    |
264 |         let op_placeable_count = op_placeable.count_ones() as i32;
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_op_placea
ble_count`                                                                                                  
warning: unused variable: `score`
   --> src/play.rs:423:18
    |
423 |             let (score, _finished, next_move, terminated) = nega_scout_background(
    |                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_score`

warning: value assigned to `best_score` is never read
   --> src/play.rs:636:13
    |
636 |     let mut best_score = f32::NEG_INFINITY;
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `best_move` is never read
   --> src/play.rs:637:13
    |
637 |     let mut best_move = PASS;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unnecessary `unsafe` block
  --> src/solver.rs:62:2
   |
62 |     unsafe {
   |     ^^^^^^ unnecessary `unsafe` block

warning: variable does not need to be mutable
   --> src/solver.rs:103:6
    |
103 |     let mut ordered_moves: Vec<(u8, u8, Board, u64)> = {
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/solver.rs:188:6
    |
188 |     let mut ordered_moves: Vec<(u8, Board, u64)> = {
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `player_color`
   --> src/main.rs:195:5
    |
195 |     player_color: Color,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_player_color`

warning: unused variable: `node_count_clone`
   --> src/main.rs:242:9
    |
242 |     let node_count_clone = node_count.clone();
    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_node_count_clon
e`                                                                                                          
warning: constant `BOARD_SCORE_A1` is never used
  --> src/database.rs:18:7
   |
18 | const BOARD_SCORE_A1 : i32 = 1;
   |       ^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: constant `BOARD_SCORE_A2` is never used
  --> src/database.rs:19:7
   |
19 | const BOARD_SCORE_A2 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_A3` is never used
  --> src/database.rs:20:7
   |
20 | const BOARD_SCORE_A3 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_A4` is never used
  --> src/database.rs:21:7
   |
21 | const BOARD_SCORE_A4 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_B2` is never used
  --> src/database.rs:22:7
   |
22 | const BOARD_SCORE_B2 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_B3` is never used
  --> src/database.rs:23:7
   |
23 | const BOARD_SCORE_B3 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_B4` is never used
  --> src/database.rs:24:7
   |
24 | const BOARD_SCORE_B4 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_C3` is never used
  --> src/database.rs:25:7
   |
25 | const BOARD_SCORE_C3 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_C4` is never used
  --> src/database.rs:26:7
   |
26 | const BOARD_SCORE_C4 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: constant `BOARD_SCORE_D4` is never used
  --> src/database.rs:27:7
   |
27 | const BOARD_SCORE_D4 : i32 = 1;
   |       ^^^^^^^^^^^^^^

warning: static `BOARD_SCORE` is never used
  --> src/database.rs:33:8
   |
33 | static BOARD_SCORE : [i32; 64] = {
   |        ^^^^^^^^^^^

warning: constant `ROW_MASK` is never used
  --> src/database.rs:64:7
   |
64 | const ROW_MASK : [u64; 8] = [
   |       ^^^^^^^^

warning: function `get_row_mask` is never used
  --> src/database.rs:76:4
   |
76 | fn get_row_mask(x: usize) -> u64 {
   |    ^^^^^^^^^^^^

warning: function `get_col_mask` is never used
  --> src/database.rs:91:4
   |
91 | fn get_col_mask(x: usize) -> u64 {
   |    ^^^^^^^^^^^^

warning: function `get_diag_mask1` is never used
   --> src/database.rs:113:4
    |
113 | fn get_diag_mask1(x: usize) -> u64 {
    |    ^^^^^^^^^^^^^^

warning: function `get_diag_mask2` is never used
   --> src/database.rs:135:4
    |
135 | fn get_diag_mask2(x: usize) -> u64 {
    |    ^^^^^^^^^^^^^^

warning: static `SCORE_TABLE` is never used
   --> src/database.rs:141:8
    |
141 | static SCORE_TABLE : [i32; 2048] = {
    |        ^^^^^^^^^^^

warning: function `get_sigmoid_table` is never used
   --> src/database.rs:545:8
    |
545 | pub fn get_sigmoid_table() -> &'static [f32; 65] {
    |        ^^^^^^^^^^^^^^^^^

warning: function `calc_freedom` is never used
   --> src/database.rs:881:8
    |
881 | pub fn calc_freedom(board: &play::Board) -> (f32, f32) {
    |        ^^^^^^^^^^^^

warning: function `print_board_u64` is never used
   --> src/database.rs:915:4
    |
915 | fn print_board_u64(board : u64){
    |    ^^^^^^^^^^^^^^^

warning: function `print_board` is never used
   --> src/database.rs:922:4
    |
922 | fn print_board(board : &play::Board){
    |    ^^^^^^^^^^^

warning: type alias `Pos` is never used
  --> src/play.rs:57:6
   |
57 | type Pos = (usize, usize);
   |      ^^^

warning: variants `None` and `Sentinel` are never constructed
  --> src/proto.rs:8:5
   |
7  | pub enum Color {
   |          ----- variants in this enum
8  |     None,
   |     ^^^^
...
11 |     Sentinel,
   |     ^^^^^^^^
   |
   = note: `Color` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored
 during dead code analysis                                                                                  
warning: methods `eval_optimized` and `compress_bits` are never used
   --> src/eval.rs:288:12
    |
209 | impl EvalFunction {
    | ----------------- methods in this implementation
...
288 |     pub fn eval_optimized(&self, board: &Board) -> f32 {
    |            ^^^^^^^^^^^^^^
...
319 |     fn compress_bits(&self, bits: u64, pattern: &[u8]) -> usize {
    |        ^^^^^^^^^^^^^

warning: function `str_to_board` is never used
   --> src/solver.rs:279:4
    |
279 | fn str_to_board(s: &String) -> Option<Board> {
    |    ^^^^^^^^^^^^

warning: creating a shared reference to mutable static
   --> src/database.rs:547:14
    |
547 |     unsafe { &SIGMOID_TABLE }
    |              ^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                               = note: `#[warn(static_mut_refs)]` on by default
help: use `&raw const` instead to create a raw pointer
    |
547 |     unsafe { &raw const SIGMOID_TABLE }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:553:14
    |
553 |     unsafe { &ROW_PLACEABLE }
    |              ^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
553 |     unsafe { &raw const ROW_PLACEABLE }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:558:14
    |
558 |     unsafe { &COL_PLACEABLE }
    |              ^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
558 |     unsafe { &raw const COL_PLACEABLE }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:563:14
    |
563 |     unsafe { &DIAG_PLACEABLE_1 }
    |              ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
563 |     unsafe { &raw const DIAG_PLACEABLE_1 }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:568:14
    |
568 |     unsafe { &DIAG_PLACEABLE_2 }
    |              ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
568 |     unsafe { &raw const DIAG_PLACEABLE_2 }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:573:14
    |
573 |     unsafe { &ROW_TURNTABLE }
    |              ^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
573 |     unsafe { &raw const ROW_TURNTABLE }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:578:14
    |
578 |     unsafe { &COL_TURNTABLE }
    |              ^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
578 |     unsafe { &raw const COL_TURNTABLE }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:583:14
    |
583 |     unsafe { &DIAG_TURNTABLE_1 }
    |              ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
583 |     unsafe { &raw const DIAG_TURNTABLE_1 }
    |               +++++++++

warning: creating a shared reference to mutable static
   --> src/database.rs:588:14
    |
588 |     unsafe { &DIAG_TURNTABLE_2 }
    |              ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-
references.html>                                                                                                = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mut
ated or if a mutable reference is created for it while the shared reference lives                           help: use `&raw const` instead to create a raw pointer
    |
588 |     unsafe { &raw const DIAG_TURNTABLE_2 }
    |               +++++++++

warning: `fl-reversi-rs` (bin "fl-reversi-rs") generated 56 warnings (run `cargo fix --bin "fl-reversi-rs"` 
to apply 11 suggestions)                                                                                        Finished `release` profile [optimized] target(s) in 0.26s
